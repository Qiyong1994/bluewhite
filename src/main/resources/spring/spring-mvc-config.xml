<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd"
		>
	  <!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->    
 	<aop:aspectj-autoproxy proxy-target-class="true"/>	
		
	<!-- 配置自动扫描的包：主要扫描Controller和ControllerAdvice -->  
    <context:component-scan base-package="com.bluewhite"   use-default-filters="false">  
        <!-- 扫描符合@Controller和@ControllerAdvice的类 -->  
        <context:include-filter type="annotation"   expression="org.springframework.stereotype.Controller" />  
        <context:include-filter type="annotation"   expression="org.springframework.web.bind.annotation.ControllerAdvice" />  
    </context:component-scan>  
    
    
    
    

      
    <!-- default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，   
        它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由 WEB 应用服务器默认的 Servlet   
        处理，如果不是静态资源的请求，才由DispatcherServlet 继续处理。 一般 WEB 应用服务器默认的 Servlet 的名称都是 default。若所使用的   
        WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定 -->  
    <mvc:default-servlet-handler />  
    <!-- 静态资源映射 -->  
    <mvc:resources mapping="/webui/**" location="/webui/" />  
    <!-- 配置直接转发的页面 ,可以直接响应转发的页面，而无需再经过Handler的方法 但是出现问题：以前配置的的controller都不起作用了。   
        解决方法：配置mvc:annotation-driven -->  
    <!-- <mvc:view-controller path="/" view-name="index"/> -->  
    <!-- 在实际开发中通常都需要配置mvc:annotation-driven标签 -->  
    <mvc:annotation-driven/>  
          
    <!-- 文件上传配置注意:这里申明的id必须为multipartResolver -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
       <property name="defaultEncoding" value="UTF-8"/>  
       <property name="maxUploadSize" value="500000"/>  
    </bean>  
    
    <!-- 用于使用@ResponseBody后返回中文避免乱码-->  
    <bean id="handlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                            <value>application/json;charset=UTF-8</value>  
                        </list>  
                    </property>  
                    <property name="writeAcceptCharset" value="false" /><!-- 用于避免响应头过大 -->  
                </bean>  
            </list>  
        </property>  
    </bean>  
    
    
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean  
        class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->  
                <prop  
                    key="org.springframework.web.multipart.MaxUploadSizeExceededException">WEB-INF/error_fileupload</prop>  
                <!-- 处理其它异常(包括Controller抛出的) -->  
                <prop key="java.lang.Throwable">WEB-INF/500</prop>  
            </props>  
        </property>  
    </bean>  
    
	
 	
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

</beans>
